- name: Set up AD server
  hosts: adserver
  vars:
    dc_hostname: "adserver"
    domain_name: "ad.test"
  tasks:
    - name: Disable Windows firewall
      win_firewall:
        state: disabled
        profiles:
          - Domain
          - Private
          - Public
      tags: disable_firewall
    - name: Change hostname
      win_hostname:
        name: '{{ dc_hostname }}'
      register: res
    - name: Reboot
      win_reboot:
      when: res.reboot_required
    - name: Install AD Domain Services
      win_feature:
        name: Ad-Domain-Services
        include_management_tools: yes
        include_sub_features: yes
        state: present
      register: res
    - name: Reboot
      win_reboot:
      when: res.reboot_required
    - name: Create domain
      win_domain:
        dns_domain_name: '{{ domain_name }}'
        safe_mode_password: Secret123
      register: res
    - name: Reboot
      ansible.windows.win_reboot:
        test_command:
          'exit (Get-Service -Name ADWS).Status -ne "Running"'
      when: res.changed
    - name: Set up first service user and keytab
      win_shell: |
        $pw = ConvertTo-SecureString -AsPlainText -Force -String Secret123
        new-aduser svcuser1 -server adserver -AccountPassword $pw `
            -PasswordNeverExpires $true -Enabled $true `
            -KerberosEncryptionType AES256
        if (-not $?) { throw "PAIN AND SUFFERING" }
        ktpass -out svc1.keytab -princ svc1/adserver.ad.test@AD.TEST `
            -mapuser svcuser1 -crypto AES256-SHA1 +rndpass `
            -ptype KRB5_NT_PRINCIPAL -target AD.TEST
        if (-not $?) { throw "PAIN AND SUFFERING" }
        certutil -encode svc1.keytab tmp
        findstr -v -c:- tmp > svc1.keytab.b64
        rm tmp
        cat svc1.keytab.b64
      args:
        creates: svc1.keytab.b64
        error_action: stop
    - name: Set up second service user and keytab
      win_shell: |
        $pw = ConvertTo-SecureString -AsPlainText -Force -String Secret123
        new-aduser svcuser2 -server adserver -AccountPassword $pw `
            -PasswordNeverExpires $true -Enabled $true `
            -KerberosEncryptionType AES256
        if (-not $?) { throw "PAIN AND SUFFERING" }
        ktpass -out svc2.keytab -princ svc2/adserver.ad.test@AD.TEST `
            -mapuser svcuser2 -crypto AES256-SHA1 +rndpass `
            -ptype KRB5_NT_PRINCIPAL -target AD.TEST
        if (-not $?) { throw "PAIN AND SUFFERING" }
        certutil -encode svc2.keytab tmp
        findstr -v -c:- tmp > svc2.keytab.b64
        rm tmp
        cat svc2.keytab.b64
      args:
        creates: svc2.keytab.b64
        error_action: stop
    - name: Set up constrained delegation
      win_shell: |
        $user = get-aduser svcuser1
        set-adobject $user `
            -add @{ "msDS-AllowedToDelegateTo" = "svc2/adserver.ad.test" }
        set-adobject $user `
            -add @{ "msDS-AllowedToDelegateTo" = "svc2/adserver" }
        set-adobject $user `
            -add @{ "msDS-AllowedToDelegateTo" = "svc2/adserver.ad.test@AD.TEST" }
        set-adobject $user `
            -add @{ "msDS-AllowedToDelegateTo" = "svc2/adserver@AD.TEST" }
        set-ADAccountControl $user -TrustedToAuthForDelegation $true `
            -TrustedForDelegation $false
        echo "done" > cd_done
      args:
        creates: cd_done
        error_action: stop
